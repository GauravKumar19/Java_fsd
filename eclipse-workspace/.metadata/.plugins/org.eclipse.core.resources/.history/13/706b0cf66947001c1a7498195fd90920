package Streamdemo;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

//Java Program to Group & Partition Collectors
 
/*
 *
The Collectors class in Java 8 provides methods for grouping and partitioning data stored in
collections.Grouping permits you to organize data that shares a common field value, 
e.g. department. 
Partitioning allows you to divide the data into two categories, or partitions.
One partition satisfies the partitioning criteria whereas the other partition does not.
For example, we might separate sales data into a partition that met or exceeded a sales 
 goal and a partition that did not.
 */
public class StreamExample6 {

	
	private static List musicalinstruments=new ArrayList<>();
	static {
	musicalinstruments.add(new Musicalinstruments("Trumpet","brass",299.99));
	musicalinstruments.add(new Musicalinstruments("Tuba","brass",1149.0));
	musicalinstruments.add(new Musicalinstruments("Timpani","percussion",2339.0));
	musicalinstruments.add(new Musicalinstruments("Snare drum","percussion",325.00));
	musicalinstruments.add(new Musicalinstruments("Piano","keyboard",5179.99));
	musicalinstruments.add(new Musicalinstruments("Trombone","brass",775.79));
	}

	public static void main(String[] args) {
		
		System.out.println("************ Musical Instruments in Collection************");
		
		Musicalinstruments.stream().forEach(i->System.out.println(i.getName()+" "+i.getType()+" "+i.getPrice()));
		
		System.out.println("*******Group Instruments by Type**********");
		
		Map<String,List<Musicalinstruments>> typemap = Musicalinstruments.stream()
				.collect(Collectors.groupingBy(Musicalinstruments::getType));
		
		typemap.forEach((key, value)->{
			System.out.println(key);
			value.forEach(i->System.out.println(i.getName()+" "+i.getType()+" "+i.getPrice()));
		});

		System.out.println("***********partiton instrument by price************");
		
		Map<Boolean,List<Musicalinstruments>> pricemap = musicalinstruments.stream()
				.collect(Collectors.partitioningBy(mi->mi.getprice() > 500.0));
		
		pricemap.forEach((key,value)->{
			System.out.println((key ? "Expensive":"Affordable"));
			value.forEach(i->System.out.println(i.getName()+" "+i.getType()+" "+i.getPrice()));});
	}

}
